"""add active_team_id and team_repositories

Revision ID: 9b5e05813e6f
Revises: 708f449a8fca
Create Date: 2025-10-20 21:51:50.959438

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9b5e05813e6f'
down_revision: Union[str, None] = '708f449a8fca'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_user_custom_rules_active', table_name='user_custom_rules')
    op.drop_index('idx_user_custom_rules_category', table_name='user_custom_rules')
    op.drop_table('user_custom_rules')
    op.drop_index('idx_scan_rules_active', table_name='scan_rules')
    op.drop_index('idx_scan_rules_category', table_name='scan_rules')
    op.drop_table('scan_rules')
    op.add_column('users', sa.Column('active_team_id', sa.Integer(), nullable=True))
    #op.alter_column('users', 'email',
              # existing_type=sa.VARCHAR(),
               #nullable=False)
    op.create_foreign_key(None, 'users', 'teams', ['active_team_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('users', 'active_team_id')
    op.create_table('scan_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('rule_content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='scan_rules_pkey')
    )
    op.create_index('idx_scan_rules_category', 'scan_rules', ['category'], unique=False)
    op.create_index('idx_scan_rules_active', 'scan_rules', ['is_active'], unique=False)
    op.create_table('user_custom_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uploaded_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('rule_content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_approved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], name='user_custom_rules_uploaded_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_custom_rules_pkey')
    )
    op.create_index('idx_user_custom_rules_category', 'user_custom_rules', ['category'], unique=False)
    op.create_index('idx_user_custom_rules_active', 'user_custom_rules', ['is_active', 'is_approved'], unique=False)
    # ### end Alembic commands ###
