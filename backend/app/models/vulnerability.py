# Update the file: backend/app/models/vulnerability.py

from sqlalchemy import Column, Integer, String, DateTime, Text, Float, ForeignKey, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.core.database import Base

class Scan(Base):
    __tablename__ = "scans"

    id = Column(Integer, primary_key=True, index=True)
    repository_id = Column(Integer, ForeignKey("repositories.id"), nullable=False)
    status = Column(String, default="pending")  # pending, running, completed, failed, stopped
    started_at = Column(DateTime, default=func.now())
    completed_at = Column(DateTime, nullable=True)
    scan_duration = Column(String, nullable=True)
    
    # File and vulnerability counts
    total_files_scanned = Column(Integer, default=0)
    total_vulnerabilities = Column(Integer, default=0)
    critical_count = Column(Integer, default=0)
    high_count = Column(Integer, default=0)
    medium_count = Column(Integer, default=0)
    low_count = Column(Integer, default=0)
    
    # Security metrics
    security_score = Column(Float, nullable=True)
    code_coverage = Column(Float, nullable=True)
    
    # Error handling
    error_message = Column(Text, nullable=True)
    
    # Scan configuration and metadata
    scan_config = Column(JSON, nullable=True)
    scan_metadata = Column(JSON, nullable=True)  # ADD THIS LINE
    scan_type = Column(String(50), default='ai')  # 'ai' or 'custom'
    # Relationships
    repository = relationship("Repository", back_populates="scans")
    vulnerabilities = relationship("Vulnerability", back_populates="scan", cascade="all, delete-orphan")


class Vulnerability(Base):
    __tablename__ = "vulnerabilities"

    id = Column(Integer, primary_key=True, index=True)
    scan_id = Column(Integer, ForeignKey("scans.id"), nullable=False)
    
    # Basic vulnerability info
    title = Column(String, nullable=False)
    description = Column(Text, nullable=False)
    severity = Column(String, nullable=False)  # critical, high, medium, low
    category = Column(String, nullable=False)
    
    # Standards and classifications
    cwe_id = Column(String, nullable=True)
    owasp_category = Column(String, nullable=True)
    
    # Location information
    file_path = Column(String, nullable=False)
    line_number = Column(Integer, nullable=True)
    line_end_number = Column(Integer, nullable=True)
    code_snippet = Column(Text, nullable=True)
    
    # Fix and recommendation
    recommendation = Column(Text, nullable=False)
    fix_suggestion = Column(Text, nullable=True)
    
    # Risk assessment
    risk_score = Column(Float, nullable=True)
    exploitability = Column(String, nullable=True)  # low, medium, high
    impact = Column(String, nullable=True)  # low, medium, high
    
    # Status tracking
    status = Column(String, default="open")  # open, fixed, false_positive, accepted
    detected_at = Column(DateTime, default=func.now())
    
    # Relationships
    scan = relationship("Scan", back_populates="vulnerabilities")
    ai_analysis_requests = relationship("AIAnalysisRequest", back_populates="vulnerability")


class ScanTemplate(Base):
    __tablename__ = "scan_templates"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    description = Column(Text, nullable=True)
    config = Column(JSON, nullable=False)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())